####################################################
# Repositório de exemplos básicos MAGIK - Consulta
# Nome: Gustavo Fraga
# 11/07/2013
####################################################

## Objeto da aplicação
app << smallworld_product.application(:sweo_atlantis)

## Recuperando o Dataset de uma determinada aplicação
ds << app.database.dataset(:Electric)

## Listando as RWOs tables de um dataset
print( ds.rwo_table_names )

## Recuperando o objeto de um determinado plugin da aplicação (Ex: :maps)
mapman << app.plugin(:maps)

## Recupernado o objeto corrente selecionado em um mapa a partir do plugin :maps
obj_pole << mapman.current_map.current_selection

## Recuperando a trilha gerada no mapa por meio da requisição ao Databus
currentTrail << _self.databus_request_data(:map_trail)[2]

## Para setar o text encoding 
   % text_encoding = utf8

## Número de linhas que serão impressas   
!print_length! << 250

## Slotted para criação de telas. EX:
def_slotted_exemplar(:place_finder_dialog,
		     {
			     {:items,_unset},
			     {:pf, _unset },
			     {:start_table,_unset},
			     {:list, _unset}
		     },
		     :model)

## Listar os tipos de "Mundos" utilizados em um DataSet
v << gis_programm_manager.cached_dataset(:gis)
print(v.collections[:sw_gis!world_type])

## Exibir sistema de coordenadas de um "Mundo"
v << gis_programm_manager.cached_dataset(:gis)
print( v.world(0,0).coordinate_system )

## Adicionar produto e carregar um módulo na sessão sem inteface gráfica
smallworld_product.add_product("<sw_apps_dev>")
sw_module_manager.load_module(:my_newdb_image)

## Procedure para vallidar se um arquivo existe
global file_exists? << _proc (file_path_name)

	_try
		file_opened << external_text_input_stream.new(file_path_name)
		file_opened.close()
		_return _true
		
	_when file_does_not_exist
		_return _false
	_endtry
	
_endproc
$

## Hierarquia de uma Condition
condition.print_hierarchy(:warning)

## Pesquisando uma condition pelo nome 
condition.condition_apropos("file")

## Definindo nova Condition
condition.define_condition(:word_not_found, :warning, {:word}, "Word #1 not found!")
$

## Utilizando XML Loader
a_ds << app.database.dataset(:gis)
app_world << app.get_application_world(0,0)
a_world << app_world.world_for_dataset(a_ds)
 xld << xml_loader.new(a_ds, a_world)
 
 ##Utilizando Blocos
 _global study_block << _proc ()			       
							   retur <<  _block
											  gus << 4
											  gus +<< 4

											  _if gus > 8
											  _then
												_leave
											  _else
												gus +<< 10
											  _endif

											  >> gus
										_endblock
							   write(retur)
						_endproc
						
#Pega valor de uma determinada variável de ambiente		
system.getenv("path")

#Criptografa strings
system.encrypt("GustavoFraga")


#Ler valores Enumerados
 ds.collection(:eo_service_point).field(:owner_name).type.enumerator.sorted_values

 #SBS Start and stop
 sbs_fme_acp.start_server("3000")
 sbs_fme_acp.start_server("3006", "sbs_fme_06")
 
 sbs_fme_acp.stop_server()

 #Criar novo bound para 
 ds.world.bounds << bounding_box.new( 4312255.701, 7397261.629, 5657582.072, 8448132.555 )

# Associar sistema  de coordenadas ao world de um dataset
 ds.world.set_coordinate_system_by_name(:samerica_brasil_lambert_eq_mm)

#Perfom Frozen Tables
ds.perform_frozen(:|switch()|, :write)
ds.perform_frozen(:|switch()|, :hard_readonly)
ds.perform_frozen(:commit|()|)


# Rope e Proc para exclusão de Projetos no Atlantis
_global l_projects_to_keep << rope.new_with("Teste Integração CIM", "CROQUI_DIGITAL", "Teste Integração - (EC) Poste" ,"MIG_CARTOGRAFIA")
$
#Chamar a procedure p_remove_projects_and_designs() passando a
# rope como parâmetro


#Limpar tabela de anotações para uma nova carga
_global _constant empty_anno_config_tables << _proc()
						      _local gpm << gis_program_manager 
						      _local a_view << gpm.config_dataset()
						      _local table_names << {:annotation_configuration,:annotation_position,:annotation_default}
						      
						      a_view.switch(:write)
						      
						      _for a_table_name _over table_names.fast_elements()
						      _loop
							      a_table << a_view.collections[a_table_name]
							      write("Empty table ",a_table)
							      _for j  _over a_table.elements() 
							      _loop
								      j.delete()
							      _endloop
							      write("Table ",a_table," size is ",a_table.size)
						      _endloop
						      a_view.commit()
					      _endproc

# Gerar Planilha Stylesubcode e carregar
sw_module_manager.load_module(:atl_eo_administration_tools,_unset,:force_reload?,_true)
style_subcode_admin_helper.create_style_subcode_file( oel().collections[:atl_measure_xfrmr_inst] )
style_subcode_admin_helper.update_style_subcode_table( ev.collections[:atl_measure_xfrmr_inst] )
